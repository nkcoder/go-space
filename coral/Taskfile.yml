# https://taskfile.dev

version: '3'

vars:
  ENV: dev
  AWS_PROFILE: dev
  TEST_EMAIL: daniel.guo@vivalabs.com.au
  SENDER: no-reply@the-hub.ai
  PIF_INPUT: data/pif_club_transfer.csv
  DD_INPUT: data/dd_club_transfer.csv

tasks:
  # Build tasks
  build:linux:
    desc: Build for Linux
    cmds:
      - GOOS=linux GOARCH=arm64 go build -o email-app .

  build:mac:
    desc: Build for Mac
    cmds:
      - GOOS=darwin GOARCH=arm64 go build -o email-app .

  # Testing tasks
  test:
    desc: Run all tests
    cmds:
      - go test ./...

  test:unit:
    desc: Run unit tests only
    cmds:
      - go test -short ./...

  test:integration:
    desc: Run integration tests only
    cmds:
      - go test -run Integration ./...

  test:coverage:
    desc: Run tests with coverage report
    cmds:
      - go test -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - 'echo "Coverage report generated: coverage.html"'

  test:verbose:
    desc: Run tests with verbose output
    cmds:
      - go test -v ./...

  test:race:
    desc: Run tests with race detection
    cmds:
      - go test -race ./...

  test:bench:
    desc: Run benchmark tests
    cmds:
      - go test -bench=. ./...

  # Code quality tasks
  lint:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run

  lint:fix:
    desc: Run golangci-lint with --fix
    cmds:
      - golangci-lint run --fix

  fmt:
    desc: Format code
    cmds:
      - golangci-lint fmt

  # Development tasks
  deps:
    desc: Download dependencies
    cmds:
      - go mod download
      - go mod tidy

  clean:
    desc: Clean build artifacts and test files
    cmds:
      - rm -f email-app email-app-linux email-app.exe
      - rm -f coverage.out coverage.html
      - go clean -testcache

  # Docker tasks
  docker:build:
    desc: Build Docker image
    cmds:
      - docker build -t club-transfer-app:1.0.0 .

  docker:test:
    desc: Run tests in Docker
    cmds:
      - docker run --rm -v $(PWD):/app -w /app golang:1.24 sh -c "go mod download && go test -v ./..."

  docker:send-email-pif:
    desc: Send PIF emails using docker-compose
    deps:
      - docker:build
    cmds:
      - export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile {{.AWS_PROFILE}}) 
      - export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile {{.AWS_PROFILE}}) 
      - docker-compose run --rm app send-email -e {{.ENV}} -t PIF -i {{.PIF_INPUT}} -s {{.SENDER}} --test-email {{.TEST_EMAIL}} -v

  docker:send-email-dd:
    desc: Send DD emails using docker-compose
    deps:
      - docker:build
    cmds:
      - export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile {{.AWS_PROFILE}}) 
      - export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile {{.AWS_PROFILE}}) 
      - docker-compose run --rm app send-email -e {{.ENV}} -t DD -i {{.DD_INPUT}} -s {{.SENDER}} --test-email {{.TEST_EMAIL}} -v

  # Install development tools
  install:tools:
    desc: Install development tools
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

  # Email sending tasks
  send-email-pif:
    desc: Send PIF club transfer emails
    deps:
      - build:mac
    cmds:
      - ./email-app send-email -e {{.ENV}} -t PIF -i {{.PIF_INPUT}} -s {{.SENDER}} --test-email {{.TEST_EMAIL}} -v
    silent: false

  send-email-dd:
    desc: Send DD club transfer emails
    deps:
      - build:mac
    cmds:
      - ./email-app send-email -e {{.ENV}} -t DD -i {{.DD_INPUT}} -s {{.SENDER}} --test-email {{.TEST_EMAIL}} -v
    silent: false

  help:
    desc: Display available commands
    cmds:
      - ./email-app --help
